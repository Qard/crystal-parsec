crystal_doc_search_index_callback({"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","body":"# crystal-parsec [![Build Status](https://travis-ci.org/dhruvrajvanshi/crystal-parsec.svg?branch=master)](https://travis-ci.org/dhruvrajvanshi/crystal-parsec)\nThis is a parsing library for the Crystal language inspired by the Haskell library\nParsec. It allows you to build parsers by combining smaller parsers.\n\nIt is based on the functional programming library\n[crz](https://github.com/dhruvrajvanshi/crz) which\nadds ADTs and monadic do notation to the language.\n\n## Quickstart\n```crystal\nrequire \"parsec\"\ninclude Parsec\n```\n### Basics\nA ```Parser(T)``` is a parser that parses a value of type T.\n```crystal\np : Parser(T)\n```\nYou can call .parse method on a parser with an input string to parse.\nIt returns either a value of type T on successful parsing or a ```Parsec::ParseError```\nwith an error message (return type ```T | ParseError```.\n```crystal\np.parse \"some input string\"\n```\n```ParseError``` has a .message field that gives a human readable error message.\n\n### Basic parsers\nThe simplest parser is a char parser that parses and returns a single character.\nIt's type is ```Parser(Char)```\n```crystal\np = char 'c'\np.parse(\"c\") # => 'c'\np.parse(\"d\").message # => \"Expected character 'c', found 'd'\"\n```\n\n```string``` parser parses a fixed string.\n```crystal\nstring(\"asdf\").parse(\"asdf\") # => \"asdf\"\nstring(\"asdf\").parse(\"x\") # => ParseError(\"Expected character 'a', found 'x'\")\n```\n\n```one_of``` takes a string and returns a parser that\nmatches one of the characters in the given string.\n```crystal\none_of(\"abcd\").parse(\"a\") # => 'a'\none_of(\"abcd\").parse(\"c\") # => 'c'\none_of(\"abcd\").parse(\"2\") # => ParseError\n```\n\n```none_of``` takes a string and returns a parser that\nmatches all characters except the ones in the given string.\n```crystal\nnone_of(\" \\n\\t\").parse(\"a\") # => 'a'\n```\n\n```Parser.of``` takes a value and returns a parser that consumes no input,\nand returns the given value unconditionally. What's the use of this\nparser? It's useful for sequencing as you'll see later.\n```crystal\nParser.of(2).parse(\"asdf\") # => 2\nParser.of(\"asdf\").parse(\"\") # => \"asdf\"\n```\n\n```fail``` takes an error message and returns a parser that\nunconditionally fails using the given message. This is useful for error \nhandling.\n### Combining parsers\n#### Or combinator\nThe ```|``` operator on parsers returns a parser that matches both the\nparser on it's LHS and RHS. It first tries the LHS, if it fails, then\ntries RHS.\n```crystal\ndigit = one_of \"1234567890\"\nalphabet = one_of \"qwertyuiopasdfghjklzxcvbnm\"\nalphanum = digit | alphabet\nalphanum.parse(\"a\") # => 'a'\nalphanum.parse(\"1\") # => '1'\n```\nBoth sides of the ```|``` operator should be of the same type. You cannot,\nfor example combine a ```Parser(Char)``` and a ```Parser(String)```.\n\n#### many\nIt takes a parser and returns a parser that parses 0 or more instances of\nthat parser. It's type is ```Parser(A) -> Parser(Array(A))```\n```crystal\nmany(digit).parse(\"\") # => []\nmany(digit).parse(\"1\") # => ['1']\nmany(digit).parse(\"1234\") # => ['1', '2', '3', '4']\n```\n\n#### one_or_more\nIt is like many, but it needs atleast one instance. It won't return\nan empty array.\n\n```cystal\none_or_more(digit).parse(\"\") # => ParseError\none_or_more(digit).parse(\"2\") # => ['2']\n```\n\n#### sep_by\nIt takes two parsers. It parses an array of first parser, seperated by\nthe second parser.\n```crystal\nsep_by(digit, char(','))\n  .parse(\"1,2,3,4\") # => ['1', '2', '3', '4']\n```\n#### Transforming the result of parsers\nThe .map method on parsers is used to transform the result of a given\nparser using a given block. It takes a block and returns a parser that\nparses using ```self``` and passes the result through the block.\n```crystal\n# take a char array and concatenate it's elements\n# into a string\ndef concatenate(arr)\n  result = \"\"\n    arr.each do |char|\n      result += char.to_s\n    end\n  result\nend\n\nputs many_1(digit)\n  .map {|arr| concatenate(arr) } # concatenate\n  .map {|x| x.to_i } # convert to int\n  .parse(\"233\") # => 233\n```\n\n#### Sequencing parsers\nYou can sequence multiple parsers using the bind method.\nThe type signature of bind is ```(A -> Parser(B)) : Parser(B)``` where\n```Parser(A)``` is the type of the parser it is called on.\nIt takes the result of the parser it is called on, passes the result to\nthe supplied block and returns the result of the block. It is like map\nbut instead of taking a block that returns a value, it takes a block that\nreturns another parser. This is used when you want to parse using multiple\nparsers in sequence possibly using the result of each step for the next.\n```crystal\nalphabets = many_1(alphabet).map {|arr| concatenate(arr) }\ndigits    = many_1(digit).map {|arr| concatenate(arr) }\n  .map {|x| x.to_i }\nparser = alphabets.bind do |name|\n  digits.bind do |number|\n    Parser.of({name, number})\n  end\nend\nparser.parse(\"asdf23\") # => {\"asdf\", 23}\n```\nWhen you want to sequence a lot of parsers, nested binds can become\ntedious and unreadable. To solve this problem, you can flatten out\nbind sequences using the [crz](https://github.com/dhruvrajvanshi/crz)\nmacro ```mdo```. Using the macro, the previous parser would look like\nthis\n```crystal\nmdo({\n  name <= alphabets,\n  number <= digits,\n  Parser.of({name, number})\n})\n```\nThis is much more readable in sequences of multiple parsers.\nYou can use regular assignments in mdo blocks too.\n```crystal\nmdo({\n  name <= alphabets,\n  num_arr <= many_1(digit),\n  concatenated = concatenate(num_arr),\n  number = concatenated.to_i,\n  Parser.of({name, number})\n}).parse(\"asdf123\") # => {\"asdf\", 123}\n```\nUse ```<=``` when the RHS is a parser and ```=``` when it is a normal\nvalue.\n\nAlways make sure that the last line in an mdo block is wrapped in a\nparser using Parser.of.\n\n#### Mutual recursion\nIf you have multiple parsers that depend on each other, you can wrap\nthem in a block so that they can be referred to before definition.\n```crystal\ndef value_p\n  number_p | string_p | array_p\nend\n\ndef array_p\n  mdo({\n    _ <= char('['),\n    arr <= sep_by(value_p, char(',')),\n    _ <= char(']')\n    Parser.of(arr)\n  })\nend\n```\nFor recursive and mutually recursive parsers, you may need to cast\nparsers to their type because type inference may not be able to infer\ntheir types.\n\nFor example, this is directly from the JSON example in the examples\ndirectory.\n```crystal\ndef json_p : Parser(JSON)\n  array_p | bool_p | null_p | jstring_p | number_p | object_p\nend\n\ndef array_p\n  mdo({\n    _   <= char('['),\n    arr <= sep_by(json_p.as Parser(JSON), comma),\n    _   <= char(']'),\n    Parser.of(JArray.new(arr))\n  }).map {|a| a.as JSON }\nend\n```\nNotice that even though return type of json_p is annotated, it still\nneeds to be cast to Parser(JSON) when being used in array_p using .as\nmethod.\n\n#### Other combinators\nThe ```>>``` operator is used to sequence two parsers and discard the\nresult of the left parser, returning the result of the right parser.\n```crystal\np = string(\"asdf\") >> string(\"abcd\")\np.parse(\"asdfabcd\") # => \"abcd\"\n```\n\nThe ```<<``` operator sequences parsers but returns the result of the\nfirst parser, ignoring the result of second parser.\n```crystal\np = string(\"asdf\") << string(\"abcd\")\np.parse(\"asdfabcd\") # => \"asdf\"\n```\n\n### Custom parsers\nYou can create custom parsers by calling ```Parser.new``` with block\nargument  of type `ParseState -> ParseResult(A)` where A is the result\ntype of your parser.\nParseState has two members, `.input` and `.offset`. `input`\nis the input string and `offset` is the current index into the input\nstring.\nParseResult is an abstract base class with two constructors,\n`ParseState::Error(A).new \"Error message\"`, indicating parse error,\nand `ParseState::Success.new(result, new_state)` indicating success.\nTo create a new `ParseState` from an existing state, you can call the\n`.advance` method with an integer argument indicating the number of\ncharacters you want to advance by. If argument is not given, it advances\nby one character. `advance`\n\nFor example, here's the implementation of the `char` function.\n```crystal\ndef char(c : Char) : Parser(Char)\n  Parser.new do |state|\n    if state.offset >= state.input.size\n      ParseResult::Error(Char).new \"Expected '#{c}' found end of string\"\n    elsif state.input[state.offset] == c\n      ParseResult::Success.new c, state.advance\n    else\n      ParseResult::Error(Char).new \"Expected '#{c}' found '#{state.input[state.offset]}'\"\n    end\n  end\nend\n```\n\nCheck out the [json example](https://github.com/dhruvrajvanshi/crystal-parsec/blob/master/examples/json.cr) for a partial JSON parser example.","program":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ","kind":"module","full_name":"CRZ","name":"CRZ"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Prelude","kind":"module","full_name":"CRZ::Prelude","name":"Prelude"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Monad/Macros","kind":"module","full_name":"CRZ::Monad::Macros","name":"Macros"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Containers","kind":"module","full_name":"CRZ::Containers","name":"Containers"}],"locations":[],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ","kind":"module","full_name":"CRZ","name":"CRZ"}],"extended_modules":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ","kind":"module","full_name":"CRZ","name":"CRZ"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec","path":"Parsec.html","kind":"module","full_name":"Parsec","name":"Parsec","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Monad/Macros","kind":"module","full_name":"CRZ::Monad::Macros","name":"Macros"}],"locations":[{"filename":"parsec.cr","line_number":3,"url":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr"}],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Monad/Macros","kind":"module","full_name":"CRZ::Monad::Macros","name":"Macros"}],"extended_modules":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec","kind":"module","full_name":"Parsec","name":"Parsec"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"alphabet-instance-method","html_id":"alphabet-instance-method","name":"alphabet","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L208","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L208","def":{"name":"alphabet","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"lowercase | uppercase"}},{"id":"alphanum-instance-method","html_id":"alphanum-instance-method","name":"alphanum","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L216","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L216","def":{"name":"alphanum","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"digit | alphabet"}},{"id":"char(c:Char):Parsec::Parser(Char)-instance-method","html_id":"char(c:Char):Parsec::Parser(Char)-instance-method","name":"char","doc":null,"summary":null,"abstract":false,"args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Char"}],"args_string":"(c : Char) : Parsec::Parser(Char)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L111","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L111","def":{"name":"char","args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(Char)","visibility":"Public","body":"Parser.new do |state|\n  if state.offset >= state.input.size\n    ParseResult::Error(Char).new(\"Expected '#{c}' found end of string\")\n  else\n    if state.input[state.offset] == c\n      ParseResult::Success.new(c, state.advance)\n    else\n      ParseResult::Error(Char).new(\"Expected '#{c}' found '#{state.input[state.offset]}'\")\n    end\n  end\nend"}},{"id":"digit-instance-method","html_id":"digit-instance-method","name":"digit","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L212","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L212","def":{"name":"digit","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"one_of(\"1234567890\")"}},{"id":"fail(cls:T.class,message:String):Parsec::Parser(T)forallT-instance-method","html_id":"fail(cls:T.class,message:String):Parsec::Parser(T)forallT-instance-method","name":"fail","doc":null,"summary":null,"abstract":false,"args":[{"name":"cls","doc":null,"default_value":"","external_name":"cls","restriction":"T.class"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(cls : T.class, message : String) : Parsec::Parser(T) forall T","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L105","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L105","def":{"name":"fail","args":[{"name":"cls","doc":null,"default_value":"","external_name":"cls","restriction":"T.class"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(T)","visibility":"Public","body":"Parser(T).new do |state|\n  ParseResult::Error(T).new(message)\nend"}},{"id":"lowercase-instance-method","html_id":"lowercase-instance-method","name":"lowercase","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L200","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L200","def":{"name":"lowercase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"one_of(\"qwertyuiopasdfghjklzxcvbnm\")"}},{"id":"many(p:Parsec::Parser(T)):Parsec::Parser(Array(T))forallT-instance-method","html_id":"many(p:Parsec::Parser(T)):Parsec::Parser(Array(T))forallT-instance-method","name":"many","doc":null,"summary":null,"abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"}],"args_string":"(p : Parsec::Parser(T)) : Parsec::Parser(Array(T)) forall T","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L159","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L159","def":{"name":"many","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(Array(T))","visibility":"Public","body":"f = p.block\nParser(Array(T)).new do |s|\n  result = f.call(s)\n  acc = [] of T\n  state = s\n  count = 1\n  while result.is_a?(ParseResult::Success(T))\n    state = result.value1\n    acc << result.value0\n    result = f.call(state)\n    count = count + 1\n  end\n  ParseResult::Success.new(acc, state)\nend\n"}},{"id":"many_1(p:Parsec::Parser(T)):Parsec::Parser(Array(T))forallT-instance-method","html_id":"many_1(p:Parsec::Parser(T)):Parsec::Parser(Array(T))forallT-instance-method","name":"many_1","doc":"DEPRECATED: Use `one_or_more`","summary":"<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"Parsec.html#one_or_more%28p%3AParsec%3A%3AParser%28T%29%29%3AParsec%3A%3AParser%28Array%28T%29%29forallT-instance-method\">#one_or_more</a></code></p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"}],"args_string":"(p : Parsec::Parser(T)) : Parsec::Parser(Array(T)) forall T","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L185","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L185","def":{"name":"many_1","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(Array(T))","visibility":"Public","body":"one_or_more(p)"}},{"id":"none_of(s:String):Parsec::Parser(Char)-instance-method","html_id":"none_of(s:String):Parsec::Parser(Char)-instance-method","name":"none_of","doc":null,"summary":null,"abstract":false,"args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"args_string":"(s : String) : Parsec::Parser(Char)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L147","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L147","def":{"name":"none_of","args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(Char)","visibility":"Public","body":"Parser.new do |state|\n  if state.offset >= state.input.size\n    ParseResult::Error(Char).new(\"Expected none of '#{s}', found end of string.\")\n  else\n    if s.includes?(state.input[state.offset].to_s)\n      ParseResult::Error(Char).new(\"Expected none of '#{s}', found #{state.input[state.offset]}.\")\n    else\n      ParseResult::Success.new(state.input[state.offset], state.advance)\n    end\n  end\nend"}},{"id":"one_of(s:String):Parsec::Parser(Char)-instance-method","html_id":"one_of(s:String):Parsec::Parser(Char)-instance-method","name":"one_of","doc":null,"summary":null,"abstract":false,"args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"args_string":"(s : String) : Parsec::Parser(Char)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L139","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L139","def":{"name":"one_of","args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(Char)","visibility":"Public","body":"p = char(s[0])\n(1...s.size).each do |i|\n  p = p | (char(s[i]))\nend\np\n"}},{"id":"one_or_more(p:Parsec::Parser(T)):Parsec::Parser(Array(T))forallT-instance-method","html_id":"one_or_more(p:Parsec::Parser(T)):Parsec::Parser(Array(T))forallT-instance-method","name":"one_or_more","doc":null,"summary":null,"abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"}],"args_string":"(p : Parsec::Parser(T)) : Parsec::Parser(Array(T)) forall T","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L176","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L176","def":{"name":"one_or_more","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(Array(T))","visibility":"Public","body":"mdo({x <= p, xs <= (many(p)), Parser.of(xs.unshift(x))})"}},{"id":"sep_by(p:Parsec::Parser(T),seperator:Parsec::Parser(U)):Parsec::Parser(Array(T))forallT,U-instance-method","html_id":"sep_by(p:Parsec::Parser(T),seperator:Parsec::Parser(U)):Parsec::Parser(Array(T))forallT,U-instance-method","name":"sep_by","doc":null,"summary":null,"abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"},{"name":"seperator","doc":null,"default_value":"","external_name":"seperator","restriction":"Parser(U)"}],"args_string":"(p : Parsec::Parser(T), seperator : Parsec::Parser(U)) : Parsec::Parser(Array(T)) forall T, U","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L189","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L189","def":{"name":"sep_by","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(T)"},{"name":"seperator","doc":null,"default_value":"","external_name":"seperator","restriction":"Parser(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(Array(T))","visibility":"Public","body":"((mdo({x <= p, s <= seperator, xs <= ((sep_by(p, seperator)).as(Parser(Array(T)))), Parser.of(xs.unshift(x))})) | (p.map do |x|\n  [x]\nend)) | (Parser.of([] of T))"}},{"id":"string(s:String):Parsec::Parser(String)-instance-method","html_id":"string(s:String):Parsec::Parser(String)-instance-method","name":"string","doc":null,"summary":null,"abstract":false,"args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"args_string":"(s : String) : Parsec::Parser(String)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L123","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L123","def":{"name":"string","args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(String)","visibility":"Public","body":"if s.size == 0\n  Parser.of(\"\")\nelse\n  if s.size == 1\n    (char(s[0])).map do |x|\n      x.to_s\n    end\n  else\n    x = s[0]\n    xs = s[1...s.size]\n    mdo({c <= (char(x)), rest <= ((string(xs)).as(Parser(String))), Parser.of(x + rest)})\n  end\nend"}},{"id":"uppercase-instance-method","html_id":"uppercase-instance-method","name":"uppercase","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L204","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L204","def":{"name":"uppercase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"one_of(\"QWERTYUIOPASDFGHJKLZXCVBNM\")"}}],"macros":[],"types":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseError","path":"Parsec/ParseError.html","kind":"class","full_name":"Parsec::ParseError","name":"ParseError","abstract":false,"superclass":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"parsec.cr","line_number":17,"url":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr"}],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec","kind":"module","full_name":"Parsec","name":"Parsec"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(message:String,state:ParseState)-class-method","html_id":"new(message:String,state:ParseState)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"ParseState"}],"args_string":"(message : String, state : ParseState)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L20","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L20","def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"ParseState"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message, state)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L19","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L19","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@message"}},{"id":"state:Parsec::ParseState-instance-method","html_id":"state:Parsec::ParseState-instance-method","name":"state","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Parsec::ParseState","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L18","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L18","def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L23","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L23","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@message"}}],"macros":[],"types":[]},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/Parser","path":"Parsec/Parser.html","kind":"class","full_name":"Parsec::Parser(A)","name":"Parser","abstract":false,"superclass":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Monad","kind":"module","full_name":"CRZ::Monad","name":"Monad"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Applicative","kind":"module","full_name":"CRZ::Applicative","name":"Applicative"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Functor","kind":"module","full_name":"CRZ::Functor","name":"Functor"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"parsec.cr","line_number":32,"url":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr"}],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/CRZ/Monad","kind":"module","full_name":"CRZ::Monad","name":"Monad"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec","kind":"module","full_name":"Parsec","name":"Parsec"},"doc":null,"summary":null,"class_methods":[{"id":"of(v:T):Parsec::Parser(T)forallT-class-method","html_id":"of(v:T):Parsec::Parser(T)forallT-class-method","name":"of","doc":null,"summary":null,"abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"T"}],"args_string":"(v : T) : Parsec::Parser(T) forall T","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L98","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L98","def":{"name":"of","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(T)","visibility":"Public","body":"Parser(T).new do |state|\n  ParseResult::Success(T).new(v, state)\nend"}}],"constructors":[{"id":"new(&block:ParseState->Parsec::ParseResult(A))-class-method","html_id":"new(&amp;block:ParseState-&gt;Parsec::ParseResult(A))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : ParseState -> Parsec::ParseResult(A))","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L35","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L35","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(ParseState -> ParseResult(A))"},"return_type":"","visibility":"Public","body":"_ = Parser(A).allocate\n_.initialize(&block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"bind(&f:A->Parsec::Parser(B)):Parsec::Parser(B)forallB-instance-method","html_id":"bind(&amp;f:A-&gt;Parsec::Parser(B)):Parsec::Parser(B)forallB-instance-method","name":"bind","doc":"Sequence another parser after this parser.\nTakes a function that takes the result of this\nparser and returns a new parser using the result.\nIf this parser fails, parsing is short circuited","summary":"<p>Sequence another parser after this parser.</p>","abstract":false,"args":[],"args_string":"(&f : A -> Parsec::Parser(B)) : Parsec::Parser(B) forall B","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L54","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L54","def":{"name":"bind","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"f","doc":null,"default_value":"","external_name":"f","restriction":"(A -> Parser(B))"},"return_type":"Parser(B)","visibility":"Public","body":"Parser(B).new do |state|\n  ParseResult.match((  @block.call(state)), ParseResult(A), {[Error, msg] => ParseResult::Error(B).new(msg), [Success, a, new_state] => (f.call(a)).block.call(new_state)})\nend"}},{"id":"block-instance-method","html_id":"block-instance-method","name":"block","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L34","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L34","def":{"name":"block","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@block"}},{"id":"parse(input:String):A|ParseError-instance-method","html_id":"parse(input:String):A|ParseError-instance-method","name":"parse","doc":"Run this parser, returning either a `ParseError`, or\nthe result","summary":"<p>Run this parser, returning either a <code><a href=\"../Parsec/ParseError.html\">ParseError</a></code>, or the result</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"args_string":"(input : String) : A | ParseError","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L41","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L41","def":{"name":"parse","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"A | ParseError","visibility":"Public","body":"initial_state = ParseState.new(input, 0)\nresult = @block.call(initial_state)\nParseResult.match(result, ParseResult(A), {[Error, msg] => ParseError.new(msg, initial_state), [Success, value, new_state] => value})\n"}},{"id":"pass_through(p:Parsec::Parser(B)):Parsec::Parser(A)forallB-instance-method","html_id":"pass_through(p:Parsec::Parser(B)):Parsec::Parser(A)forallB-instance-method","name":"pass_through","doc":"Sequence another parser after this parser,\nignoring the result of the second one, and returning\nthe result of this parser.\n\n```\npx = one_or_more(digit)\n  .pass_through(string \"px\")\n  .map {|x| x.join() }\n  .map {|x| x.to_i }\npx.parse(\"10px\").should eq 10\npx.parse(\"10\").class.should eq ParseError\n```","summary":"<p>Sequence another parser after this parser, ignoring the result of the second one, and returning the result of this parser.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(B)"}],"args_string":"(p : Parsec::Parser(B)) : Parsec::Parser(A) forall B","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L90","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L90","def":{"name":"pass_through","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Parser(B)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(A)","visibility":"Public","body":"mdo({result <= self, (_) <= p, Parser.of(result)})"}},{"id":"|(p2:Parsec::Parser(A)):Parsec::Parser(A)-instance-method","html_id":"|(p2:Parsec::Parser(A)):Parsec::Parser(A)-instance-method","name":"|","doc":"Combine another parser of the same type with\nthis parser. If this parser fails, try using\nthe given parser.","summary":"<p>Combine another parser of the same type with this parser.</p>","abstract":false,"args":[{"name":"p2","doc":null,"default_value":"","external_name":"p2","restriction":"Parser(A)"}],"args_string":"(p2 : Parsec::Parser(A)) : Parsec::Parser(A)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L66","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L66","def":{"name":"|","args":[{"name":"p2","doc":null,"default_value":"","external_name":"p2","restriction":"Parser(A)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Parser(A)","visibility":"Public","body":"f1 = @block\nf2 = p2.block\nParser(A).new do |state|\n  result = (f1.call(state))\n  ParseResult.match(result, ParseResult(A), {[Success, _, _] => result, [Error, e] => f2.call(state)})\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult","path":"Parsec/ParseResult.html","kind":"class","full_name":"Parsec::ParseResult(T)","name":"ParseResult","abstract":true,"superclass":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"parsec.cr","line_number":28,"url":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr"}],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult/Error","kind":"class","full_name":"Parsec::ParseResult::Error(T)","name":"Error"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult/Success","kind":"class","full_name":"Parsec::ParseResult::Success(T)","name":"Success"}],"including_types":[],"namespace":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec","kind":"module","full_name":"Parsec","name":"Parsec"},"doc":"base class","summary":"<p>base class</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"match(val,base,cases)-macro","html_id":"match(val,base,cases)-macro","name":"match","doc":null,"summary":null,"abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""},{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":""},{"name":"cases","doc":null,"default_value":"","external_name":"cases","restriction":""}],"args_string":"(val, base, cases)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L28","def":{"name":"match","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""},{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":""},{"name":"cases","doc":null,"default_value":"","external_name":"cases","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        -> \n{\n          __temp_27 = \n{{ val }}\n\n          __temp_28 = -> \n{\n            \n{% literal_classes = [\"NumberLiteral\", \"StringLiteral\", \"BoolLiteral\", \"NilLiteral\", \"CharLiteral\", \"SymbolLiteral\"] %}\n\n            \n{% for pattern, i in cases.keys %}\n              {% if pattern.class_name == \"ArrayLiteral\" %}\n                if\n                  {% if pattern[0].class_name == \"Underscore\" %}\n                    (true) # wildcard pattern; always match\n                    return {{ cases[pattern] }}\n                  {% else %}\n                      \n                        __temp_27.is_a?(ParseResult::{{ pattern[0] }}({{ base.type_vars.splat }}))\n                      \n                        # bind pattern vars\n                        {% for j in 1...pattern.size %}\n                          {% if pattern[j].class_name == \"Var\" %}\n                            \n                              {{ pattern[j] }} = __temp_27.as(ParseResult::{{ pattern[0] }}({{ base.type_vars.splat }})).value{{ j - 1 }}\n                            \n                          {% else %}{% if pattern[j].class_name == \"Call\" %}\n                            \n                              {{ pattern[j].id }} = __temp_27.as(ParseResult::{{ pattern[0] }}({{ base.type_vars.splat }})).value{{ j - 1 }}\n                            \n                          {% end %}{% end %}\n                        {% end %}\n                        {% literals = pattern.select do |p|\n  literal_classes.includes?(p.class_name)\nend %}\n                        {% for literal, j in pattern %}\n                          {% if literal_classes.includes?(literal.class_name) %}\n                            if(__temp_27.value{{ j - 1 }} == {{ literal }})\n                          {% end %}\n                        {% end %}\n                        return {{ cases[pattern] }}\n                        {% for literal in literals %}\n                          end\n                        {% end %}\n                  {% end %}\n                end # end of pattern branch\n              {% else %}\n                {% pattern.raise(\"Pattern should be an Array.\") %}\n              {% end %}\n            {% end %}\n\n            raise ArgumentError.new(\"Non exhaustive patterns passed to\" + \"parse_result\" + \".match\")\n          }\n          __temp_28.call()\n        }.call\n      \n"}}],"types":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult/Error","path":"Parsec/ParseResult/Error.html","kind":"class","full_name":"Parsec::ParseResult::Error(T)","name":"Error","abstract":false,"superclass":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult","kind":"class","full_name":"Parsec::ParseResult","name":"ParseResult"},"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult","kind":"class","full_name":"Parsec::ParseResult","name":"ParseResult"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"parsec.cr","line_number":28,"url":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr"}],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult","kind":"class","full_name":"Parsec::ParseResult(T)","name":"ParseResult"},"doc":"generic base\nintersection type","summary":"<p>generic base intersection type</p>","class_methods":[],"constructors":[{"id":"new(value0:String)-class-method","html_id":"new(value0:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":"String"}],"args_string":"(value0 : String)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L28","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L28","def":{"name":"new","args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Error(T).allocate\n_.initialize(value0)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"value0-instance-method","html_id":"value0-instance-method","name":"value0","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"value0","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value0"}},{"id":"value0=(value0)-instance-method","html_id":"value0=(value0)-instance-method","name":"value0=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":""}],"args_string":"(value0)","source_link":null,"source_link":null,"def":{"name":"value0=","args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value0 = value0"}}],"macros":[],"types":[]},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult/Success","path":"Parsec/ParseResult/Success.html","kind":"class","full_name":"Parsec::ParseResult::Success(T)","name":"Success","abstract":false,"superclass":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult","kind":"class","full_name":"Parsec::ParseResult","name":"ParseResult"},"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult","kind":"class","full_name":"Parsec::ParseResult","name":"ParseResult"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"parsec.cr","line_number":28,"url":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr"}],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseResult","kind":"class","full_name":"Parsec::ParseResult(T)","name":"ParseResult"},"doc":"intersection type","summary":"<p>intersection type</p>","class_methods":[],"constructors":[{"id":"new(value0:T,value1:ParseState)-class-method","html_id":"new(value0:T,value1:ParseState)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":"T"},{"name":"value1","doc":null,"default_value":"","external_name":"value1","restriction":"ParseState"}],"args_string":"(value0 : T, value1 : ParseState)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L28","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L28","def":{"name":"new","args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":"T"},{"name":"value1","doc":null,"default_value":"","external_name":"value1","restriction":"ParseState"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Success(T).allocate\n_.initialize(value0, value1)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"value0-instance-method","html_id":"value0-instance-method","name":"value0","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"value0","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value0"}},{"id":"value0=(value0)-instance-method","html_id":"value0=(value0)-instance-method","name":"value0=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":""}],"args_string":"(value0)","source_link":null,"source_link":null,"def":{"name":"value0=","args":[{"name":"value0","doc":null,"default_value":"","external_name":"value0","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value0 = value0"}},{"id":"value1-instance-method","html_id":"value1-instance-method","name":"value1","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"value1","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value1"}},{"id":"value1=(value1)-instance-method","html_id":"value1=(value1)-instance-method","name":"value1=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value1","doc":null,"default_value":"","external_name":"value1","restriction":""}],"args_string":"(value1)","source_link":null,"source_link":null,"def":{"name":"value1=","args":[{"name":"value1","doc":null,"default_value":"","external_name":"value1","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value1 = value1"}}],"macros":[],"types":[]}]},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec/ParseState","path":"Parsec/ParseState.html","kind":"class","full_name":"Parsec::ParseState","name":"ParseState","abstract":false,"superclass":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"parsec.cr","line_number":6,"url":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr"}],"repository_name":"github.com/dhruvrajvanshi/crystal-parsec","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dhruvrajvanshi/crystal-parsec/Parsec","kind":"module","full_name":"Parsec","name":"Parsec"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(input:String,offset:Int32)-class-method","html_id":"new(input:String,offset:Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"},{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Int32"}],"args_string":"(input : String, offset : Int32)","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L9","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L9","def":{"name":"new","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"},{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(input, offset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"advance(by=1):ParseState-instance-method","html_id":"advance(by=1):ParseState-instance-method","name":"advance","doc":null,"summary":null,"abstract":false,"args":[{"name":"by","doc":null,"default_value":"1","external_name":"by","restriction":""}],"args_string":"(by = <span class=\"n\">1</span>) : ParseState","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L12","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L12","def":{"name":"advance","args":[{"name":"by","doc":null,"default_value":"1","external_name":"by","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ParseState","visibility":"Public","body":"ParseState.new(@input, @offset + by)"}},{"id":"input:String-instance-method","html_id":"input:String-instance-method","name":"input","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L7","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L7","def":{"name":"input","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@input"}},{"id":"offset:Int32-instance-method","html_id":"offset:Int32-instance-method","name":"offset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L8","source_link":"https://github.com/dhruvrajvanshi/crystal-parsec/blob/00c6909e6ecdead3a7a3f1000494edc8b54adb19/src/parsec.cr#L8","def":{"name":"offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@offset"}}],"macros":[],"types":[]}]}]}})